%%

clear all
close all
clc
GenerateHandlers2;  % creates function handler for omega vector

global Ts  RunT  

J = eye(3);
%%%%% Intermittency %%%%%% 
Ts = 0.001;   % Sampling time  (jump between Tm and TM)
Tm = Ts*1;   % T min interval
TM = Ts*1;   % T max interval 

% Run time
N = 30/Ts;
RunT = Tm + (TM-Tm).*rand(N,1);


% Intial conditions
% Large Euler angles
phi   = 0;    % 90 deg roll
theta = pi;    % 90 deg pitch
psi   = 0;    % 90 deg yaw

% Compute initial rotation matrix
R_0 = eulerToSO3(phi, theta, psi)
trace(R_0)


omega0 = zeros(3,1);
Rd0 = eye(3);
0.5*trace(eye
x0 = [R_0(:); omega0; Rd0(:)];
  [Tout_SO3,Error_SO3,Xout_SO3,Xdout_SO3,uout_SO3,norms_SO3] = SO3OdeIntegrator(x0,J);


%% Plots
% Plot distance history vs. time
figure;
plot(Tout_SO3, norms_SO3, 'LineWidth', 2);
grid on;
xlabel('Time [s]');
ylabel('Normalized Euclidean Distance');
title('Attitude Tracking Error vs Time');

%% Adding values to the plot axis (Percent)
LIMIT        = 0.03;

Font_x       = 20;
Font_y       = 20;
Font_Legend  = 20;
Font_Title   = 20;
Tick         = 5;
Tick_BOX     = 12;
L_Wid        = 3;




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        





